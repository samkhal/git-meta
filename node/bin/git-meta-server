#!/usr/bin/env node
/*
 * Copyright (c) 2016, Two Sigma Open Source
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice,
 *   this list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of git-meta nor the names of its
 *   contributors may be used to endorse or promote products derived from
 *   this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

// Create a server to respond to git-meta requests

const gitMeta = require("./../lib/git-meta.js");

const ipc = require('node-ipc');

ipc.config.id = 'gitmeta';
ipc.config.retry= 1500;
ipc.config.rawBuffer=true;
ipc.config.encoding='ascii';

ipc.serve(
    function(){
        ipc.server.on(
            'connect',
            function(socket){
                ipc.log("Connected");
            }
        );

        ipc.server.on(
            'data',
            function(data, socket){
                const message = data.toString()
                ipc.log('Got a message: ', message);
                const [command_workdir, command, ...stdin_arr] = message.split(";");
                const stdin = stdin_arr.join(";");

                const cwd = process.cwd();
                try{
                    process.chdir(command_workdir);
                    ipc.log("Changing dir to ", command_workdir);
                }
                catch(err){
                    ipc.log("Could not change to dir to ", command_workdir);
                    return;
                }

                gitMeta.runCommand(command.trim().split(" "), stdin)
                .then(output => {
                    process.chdir(cwd); // change cwd back

                    const end_of_transmission = String.fromCharCode(4);

                    ipc.server.emit(
                        socket,
                        output + end_of_transmission
                    );

                    return;
                })
                .catch(err => ipc.log("Command threw an error:", err));
            }
        );
    }
);

ipc.server.start();





